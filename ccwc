#!/usr/local/bin/python3
# See challenge here: https://codingchallenges.fyi/challenges/challenge-wc/
import sys

def get_encoding(bom):
    if bom.startswith(b'\xef\xbb\xbf'):  # UTF-8 BOM
        return 'utf-8'
    elif bom.startswith((b'\xff\xfe', b'\xfe\xff')):  # UTF-16 BOM
        return 'utf-16'
    elif bom.startswith(b'\xff\xfe\x00\x00') or bom.startswith(b'\x00\x00\xfe\xff'):  # UTF-32 BOM
        return 'utf-32'
    else:
        return None

def detect_encoding_from_pipe(pipe_data):
    bom = pipe_data[0][0]
    return get_encoding(bom=bom)

def detect_encoding_by_bom(file_path):
    with open(file_path, 'rb') as file:
        bom = file.read(4)
        return get_encoding(bom=bom)
        
        
def get_filename_and_count(file_path, file_content):
    return (len(file_content), file_path)  
           

def print_in_multi_format(args):
    print('\t', end="")
    for arg in args:
        print(str(arg) + '\t', end="")

def ccwc(pipe_args, args): 
    file_content = []
    if len(args) == 3 and len(args[2]) >= 1:
        ccwc_with_flags(args)
    elif len(args) == 2 and pipe_args == []:
        ccwc_without_flags(args)
    else:
        ccwc_with_pipe(pipe_args, args)

def ccwc_with_pipe(pipe_args, args):
    if len(args) == 2:
        flag = args[1]
        if flag == '-c':
            file_content = pipe_args
            file_content = ''.join(file_content)
            print_in_multi_format(get_filename_and_count("", file_content))
        elif flag == '-l':
            file_content = pipe_args         
            print_in_multi_format(get_filename_and_count("", file_content))
        elif flag == '-w':
            file_content = pipe_args  
            file_content = ''.join(file_content)   
            print_in_multi_format(get_filename_and_count("", file_content=file_content.split()))
    elif len(args) == 1:
        file_content_lines = pipe_args
        file_content_words = ''.join(pipe_args)
        file_content = file_content_words
        print_in_multi_format([get_filename_and_count("", file_content_lines)[0],
                               get_filename_and_count("", file_content=file_content_words.split())[0],
                               get_filename_and_count("", file_content)[0],
                               ""])

def ccwc_without_flags(args):
    file_path = args[1]
    file_content_lines = []
    file_content_words = []
    with open(file_path, 'rb') as file:
        for line in file:
            file_content_lines.append(line)
        file.seek(0)
        file_content = file.read()
        file_content_words = file_content
    print_in_multi_format([get_filename_and_count(file_path, file_content_lines)[0],
                               get_filename_and_count(file_path, file_content=file_content_words.split())[0],
                               get_filename_and_count(file_path, file_content)[0],
                               file_path])

def ccwc_with_flags(args):
    file_path = args[2]
    flag = args[2]
    if flag == '-c':
        with open(file_path, 'rb') as file:
            file_content = file.read()
            print_in_multi_format(get_filename_and_count(file_path, file_content))
    elif flag == '-l':
        with open(file_path, 'rb') as file:
            for line in file:
                file_content.append(line)            
        print_in_multi_format(get_filename_and_count(file_path, file_content))
    elif flag == '-w':
        with open(file_path, 'rb') as file:
            file_content = file.read()   
        print_in_multi_format(get_filename_and_count(file_path, file_content=file_content.split()))
    elif flag == '-m':
        encoding = detect_encoding_by_bom(file_path)
        with open(file_path, 'r', encoding = encoding, newline = '\n') as file:
            file_content = file.read()
        print_in_multi_format(get_filename_and_count(file_path, file_content))


# need to pass file content, file path in ccwc to add support for pipe input.
if __name__ == "__main__":    
    if not sys.stdin.isatty():
        # Read input from stdin (pipe)
        input_from_pipe = sys.stdin.read().strip()
        args = sys.argv
        # Split the input into lines (assuming each line is an argument)
        pipe_args = input_from_pipe.split('\n')
        ccwc(pipe_args, args)
    else:
        ccwc(sys.argv)
 
